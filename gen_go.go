package errorz

import (
	"errors"
	"fmt"
	"sort"
	"strings"
)

var ErrInvalidPackageName = errors.New("package name must be non-empty and alphanumeric")

// GenerateGoContent generates the Go code content from error definitions.
func GenerateGoContent(packageName string, errors map[string]ErrorDefinition) (string, error) {
	if strings.TrimSpace(packageName) == "" || strings.ContainsAny(packageName, " -./\\") {
		return "", ErrInvalidPackageName
	}

	// Sort error codes alphabetically for consistent ordering
	var codes []string
	for code := range errors {
		codes = append(codes, code)
	}
	sort.Strings(codes)

	var builder strings.Builder

	// Header
	builder.WriteString("// Code generated by gen_errors. DO NOT EDIT.\n")
	builder.WriteString(fmt.Sprintf("package %s\n\n", packageName))

	// Error struct definition
	builder.WriteString("type Error struct {\n")
	builder.WriteString("\tCode       string\n")
	builder.WriteString("\tMsg        string\n")
	builder.WriteString("\tHTTPStatus int\n")
	builder.WriteString("}\n\n")

	// Individual error variables
	builder.WriteString("var (\n")
	for _, code := range codes {
		errDef := errors[code]
		builder.WriteString(fmt.Sprintf("\t%s = Error{\n", code))
		builder.WriteString(fmt.Sprintf("\t\tCode: \"%s\",\n", escape(errDef.Code)))
		builder.WriteString(fmt.Sprintf("\t\tMsg: \"%s\",\n", escape(errDef.Msg)))
		builder.WriteString(fmt.Sprintf("\t\tHTTPStatus: %d,\n", errDef.HTTPStatus))
		builder.WriteString("\t}\n")
	}
	builder.WriteString(")\n\n")

	// Errors slice containing all error objects
	builder.WriteString("var Errors = []Error{\n")
	for _, code := range codes {
		errDef := errors[code]
		builder.WriteString("\t{\n")
		builder.WriteString(fmt.Sprintf("\t\tCode: \"%s\",\n", escape(errDef.Code)))
		builder.WriteString(fmt.Sprintf("\t\tMsg: \"%s\",\n", escape(errDef.Msg)))
		builder.WriteString(fmt.Sprintf("\t\tHTTPStatus: %d,\n", errDef.HTTPStatus))
		builder.WriteString("\t},\n")
	}
	builder.WriteString("}\n")

	return builder.String(), nil
}

func escape(s string) string {
	s = strings.ReplaceAll(s, `"`, `\"`)
	s = strings.ReplaceAll(s, "\n", `\n`)
	return s
}
