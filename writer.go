package errorz

import (
	"fmt"
	"os"
	"path/filepath"
	"sort"
	"strings"
)

// WriteGoFile generates a Go source file that defines error variables.
func WriteGoFile(outputDir, packageName string, errors map[string]ErrorDefinition) error {
	if err := os.MkdirAll(outputDir, os.ModePerm); err != nil {
		return fmt.Errorf("failed to create output dir: %w", err)
	}

	// Sort errors by code for consistency
	var codes []string
	for code := range errors {
		codes = append(codes, code)
	}
	sort.Strings(codes)

	var lines []string
	lines = append(lines, "// Code generated by gen_errors. DO NOT EDIT.")
	lines = append(lines, fmt.Sprintf("package %s", packageName))
	lines = append(lines, "")
	lines = append(lines, "type Error struct {")
	lines = append(lines, "\tCode       string")
	lines = append(lines, "\tMsg        string")
	lines = append(lines, "\tHTTPStatus int")
	lines = append(lines, "}")
	lines = append(lines, "")

	// Declare var block for individual errors
	lines = append(lines, "var (")
	for _, code := range codes {
		errDef := errors[code]
		lines = append(lines, fmt.Sprintf("\t%s = Error{", code))
		lines = append(lines, fmt.Sprintf("\t\tCode: \"%s\",", errDef.Code))
		lines = append(lines, fmt.Sprintf("\t\tMsg: \"%s\",", errDef.Msg))
		lines = append(lines, fmt.Sprintf("\t\tHTTPStatus: %d,", errDef.HTTPStatus))
		lines = append(lines, "\t}")
	}
	lines = append(lines, ")")
	lines = append(lines, "")

	// Create Errors slice containing all errors as full struct literals
	lines = append(lines, "var Errors = []Error{")
	for _, code := range codes {
		errDef := errors[code]
		lines = append(lines, "\t{")
		lines = append(lines, fmt.Sprintf("\t\tCode: \"%s\",", errDef.Code))
		lines = append(lines, fmt.Sprintf("\t\tMsg: \"%s\",", errDef.Msg))
		lines = append(lines, fmt.Sprintf("\t\tHTTPStatus: %d,", errDef.HTTPStatus))
		lines = append(lines, "\t},")
	}
	lines = append(lines, "}")

	outputPath := filepath.Join(outputDir, fmt.Sprintf("%s.go", packageName))
	content := strings.Join(lines, "\n")

	if err := os.WriteFile(outputPath, []byte(content), 0644); err != nil {
		return fmt.Errorf("failed to write Go file: %w", err)
	}

	fmt.Printf("Generated: %s\n", outputPath)
	return nil
}
